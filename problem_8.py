"""
The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832.

731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861
560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895
044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904
915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881
220235421809751254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514
929086256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434
506585412275886668811642717147992444292823086346567481391912316282458617866458359124566529476545682848912
883142607690042242190226710556263211111093705442175069416589604080719840385096245544436298123098787992724
428490918884580156166097919133875499200524063689912560717606058861164671094050775410022569831552000559357
2972571636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
What is the value of this product?

"""

thousand_digit_num = (
    "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861"
    "560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895"
    "044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904"
    "915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881"
    "220235421809751254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514"
    "929086256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434"
    "506585412275886668811642717147992444292823086346567481391912316282458617866458359124566529476545682848912"
    "883142607690042242190226710556263211111093705442175069416589604080719840385096245544436298123098787992724"
    "428490918884580156166097919133875499200524063689912560717606058861164671094050775410022569831552000559357"
    "2972571636269561882670428252483600823257530420752963450"
)

def main():
    greatest_product = 0
    for i in range(0, len(thousand_digit_num)-12):
        new_product = int(thousand_digit_num[i]) * int(thousand_digit_num[i+1]) * int(thousand_digit_num[i+2]) * int(thousand_digit_num[i+3]) * int(thousand_digit_num[i+4]) * int(thousand_digit_num[i+5]) * int(thousand_digit_num[i+6]) * int(thousand_digit_num[i+7]) * int(thousand_digit_num[i+8]) * int(thousand_digit_num[i+9]) * int(thousand_digit_num[i+10]) * int(thousand_digit_num[i+11]) * int(thousand_digit_num[i+12])
        if new_product > greatest_product:
            greatest_product = new_product
            print(f'integers are {thousand_digit_num[i]}{thousand_digit_num[i+1]}{thousand_digit_num[i+2]}{thousand_digit_num[i+3]}{thousand_digit_num[i+4]}{thousand_digit_num[i+5]}{thousand_digit_num[i+6]}{thousand_digit_num[i+7]}{thousand_digit_num[i+8]}{thousand_digit_num[i+9]}{thousand_digit_num[i+10]}{thousand_digit_num[i+11]}{thousand_digit_num[i+12]}'
                  f'new greatest product = {greatest_product}')

if __name__ == "__main__":
    main()